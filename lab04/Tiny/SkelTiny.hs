-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Tiny.SkelTiny where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Tiny.AbsTiny

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Tiny.AbsTiny.Ident -> Result
transIdent x = case x of
  Tiny.AbsTiny.Ident string -> failure x

transProgram :: Tiny.AbsTiny.Program -> Result
transProgram x = case x of
  Tiny.AbsTiny.Prog stmt -> failure x

transDecl :: Tiny.AbsTiny.Decl -> Result
transDecl x = case x of
  Tiny.AbsTiny.DVar ident exp -> failure x

transStmt :: Tiny.AbsTiny.Stmt -> Result
transStmt x = case x of
  Tiny.AbsTiny.SSkip -> failure x
  Tiny.AbsTiny.SVar ident exp -> failure x
  Tiny.AbsTiny.SSem stmt1 stmt2 -> failure x
  Tiny.AbsTiny.SIfElse bexp stmt1 stmt2 -> failure x
  Tiny.AbsTiny.SWhile bexp stmt -> failure x
  Tiny.AbsTiny.SBlock decls stmt -> failure x

transExp :: Tiny.AbsTiny.Exp -> Result
transExp x = case x of
  Tiny.AbsTiny.EAdd exp1 addop exp2 -> failure x
  Tiny.AbsTiny.EMul exp1 mulop exp2 -> failure x
  Tiny.AbsTiny.ENeg exp -> failure x
  Tiny.AbsTiny.EInt integer -> failure x
  Tiny.AbsTiny.EVar ident -> failure x

transBExp :: Tiny.AbsTiny.BExp -> Result
transBExp x = case x of
  Tiny.AbsTiny.BOr bexp1 bexp2 -> failure x
  Tiny.AbsTiny.BAnd bexp1 bexp2 -> failure x
  Tiny.AbsTiny.BRel exp1 relop exp2 -> failure x
  Tiny.AbsTiny.BNeg bexp -> failure x
  Tiny.AbsTiny.BT -> failure x
  Tiny.AbsTiny.BF -> failure x

transAddOp :: Tiny.AbsTiny.AddOp -> Result
transAddOp x = case x of
  Tiny.AbsTiny.Plus -> failure x
  Tiny.AbsTiny.Minus -> failure x

transMulOp :: Tiny.AbsTiny.MulOp -> Result
transMulOp x = case x of
  Tiny.AbsTiny.Times -> failure x
  Tiny.AbsTiny.Div -> failure x
  Tiny.AbsTiny.Mod -> failure x

transRelOp :: Tiny.AbsTiny.RelOp -> Result
transRelOp x = case x of
  Tiny.AbsTiny.LT -> failure x
  Tiny.AbsTiny.LE -> failure x
  Tiny.AbsTiny.GT -> failure x
  Tiny.AbsTiny.GE -> failure x
  Tiny.AbsTiny.EQ -> failure x
  Tiny.AbsTiny.NE -> failure x
