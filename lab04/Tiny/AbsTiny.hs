-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Tiny.

module Tiny.AbsTiny where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Prog Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = DVar Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = SSkip
    | SVar Ident Exp
    | SSem Stmt Stmt
    | SIfElse BExp Stmt Stmt
    | SWhile BExp Stmt
    | SBlock [Decl] Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EAdd Exp AddOp Exp
    | EMul Exp MulOp Exp
    | ENeg Exp
    | EInt Integer
    | EVar Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BExp
    = BOr BExp BExp
    | BAnd BExp BExp
    | BRel Exp RelOp Exp
    | BNeg BExp
    | BT
    | BF
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LT | LE | GT | GE | EQ | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

